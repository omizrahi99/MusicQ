{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useCallback } from \"react\";\n\nfunction Table(props) {\n  const {\n    0: name,\n    1: setName\n  } = useState(props.song);\n  const {\n    0: score,\n    1: setScore\n  } = useState(props.score); // handles changes when upvoting score of each of song dynamically\n\n  const upvote = useCallBack(async event => {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this song is built from state\n      body: JSON.stringify({\n        song: name,\n        score: score\n      })\n    }); // forces a call to the hook useSWR\n    // update sent\n\n    setSent(true);\n  }, [name, score]);\n  return __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"onClick=\", () => setScore(score + 1), \"> upvote\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"onClick=\", () => setScore(score - 1), \"> downvote\")));\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js"],"names":["useState","useCallback","Table","props","name","setName","song","score","setScore","upvote","useCallBack","event","fetch","method","headers","body","JSON","stringify","setSent"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAACG,KAAK,CAACG,IAAP,CAAhC;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAACG,KAAK,CAACI,KAAP,CAAlC,CAFoB,CAIpB;;AACA,QAAME,MAAM,GAAGC,WAAW,CACxB,MAAMC,KAAN,IAAe;AACb,UAAMC,KAAK,CAAC,UAAD,EAAa;AACtBC,MAAAA,MAAM,EAAE,MADc;AAEtBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFa;AAKtB;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,QAAAA,IAAI,EAAEF,IADa;AAEnBG,QAAAA,KAAK,EAAEA;AAFY,OAAf;AANgB,KAAb,CAAX,CADa,CAYb;AAEA;;AACAW,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAjBuB,EAkBxB,CAACd,IAAD,EAAOG,KAAP,CAlBwB,CAA1B;AAqBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B,aADF,CAHF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B,eADF,CANF,CADF;AAYD;;AAED,eAAeL,KAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n\nfunction Table(props) {\n  const [name, setName] = useState(props.song);\n  const [score, setScore] = useState(props.score);\n\n  // handles changes when upvoting score of each of song dynamically\n  const upvote = useCallBack(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          song: name,\n          score: score\n        })\n      });\n      // forces a call to the hook useSWR\n\n      // update sent\n      setSent(true);\n    },\n    [name, score]\n  );\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{score}</td>\n      <td>\n        <button>onClick={() => setScore(score + 1)}> upvote</button>\n      </td>\n      <td>\n        <button>onClick={() => setScore(score - 1)}> downvote</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}