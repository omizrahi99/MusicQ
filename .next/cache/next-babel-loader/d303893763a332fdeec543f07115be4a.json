{"ast":null,"code":"import { initDatabase } from \"../../utils/mongodb\"; // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nasync function updateSong(req, res) {\n  const query = req.body; // if the song passed is null\n  // deal with this edge case\n\n  if (!query) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\"); // first search for document in MongoDB database that matches query.\n  // Query is the name of the song.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n\n  const result = await users.updateOne({\n    song: {\n      song: query.song,\n      score: query.score - 1\n    }\n  }, {\n    $set: {\n      score: req.body.score\n    }\n  });\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({\n    result\n  }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"PUT\") {\n    return updateSong(req, res);\n  } // request is not a GET or PUT;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n\n\n  throw {\n    status: 405\n  };\n}\n\nexport default performAction;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/update.js"],"names":["initDatabase","updateSong","req","res","query","body","status","message","client","users","collection","result","updateOne","song","score","$set","statusCode","setHeader","end","JSON","stringify","performAction","method"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B,C,CAEA;AACA;;AACA,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AAClC,QAAMC,KAAK,GAAGF,GAAG,CAACG,IAAlB,CADkC,CAElC;AACA;;AACA,MAAI,CAACD,KAAL,EAAY;AACV,UAAM;AACJE,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GATiC,CAWlC;;;AACA,QAAMC,MAAM,GAAG,MAAMR,YAAY,EAAjC;AACA,QAAMS,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd,CAbkC,CAelC;AACA;AACA;AACA;;AACA,QAAMC,MAAM,GAAG,MAAMF,KAAK,CAACG,SAAN,CACnB;AAAEC,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAET,KAAK,CAACS,IAAd;AAAoBC,MAAAA,KAAK,EAAEV,KAAK,CAACU,KAAN,GAAc;AAAzC;AAAR,GADmB,EAEnB;AACEC,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAEZ,GAAG,CAACG,IAAJ,CAASS;AAAlB;AADR,GAFmB,CAArB;AAOAX,EAAAA,GAAG,CAACa,UAAJ,GAAiB,GAAjB;AACAb,EAAAA,GAAG,CAACc,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAd,EAAAA,GAAG,CAACe,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAET,IAAAA;AAAF,GAAf,CAAR;AACD;;AAED,eAAeU,aAAf,CAA6BnB,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC,MAAID,GAAG,CAACoB,MAAJ,IAAc,KAAlB,EAAyB;AACvB,WAAOrB,UAAU,CAACC,GAAD,EAAMC,GAAN,CAAjB;AACD,GAHoC,CAIrC;AACA;AACA;AACA;AACA;;;AACA,QAAM;AAAEG,IAAAA,MAAM,EAAE;AAAV,GAAN;AACD;;AAED,eAAee,aAAf","sourcesContent":["import { initDatabase } from \"../../utils/mongodb\";\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nasync function updateSong(req, res) {\n  const query = req.body;\n  // if the song passed is null\n  // deal with this edge case\n  if (!query) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n\n  // create MongoDB client as well as reference to MongoDB collection\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n\n  // first search for document in MongoDB database that matches query.\n  // Query is the name of the song.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n  const result = await users.updateOne(\n    { song: { song: query.song, score: query.score - 1 } },\n    {\n      $set: { score: req.body.score }\n    }\n  );\n\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({ result }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"PUT\") {\n    return updateSong(req, res);\n  }\n  // request is not a GET or PUT;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n  throw { status: 405 };\n}\n\nexport default performAction;\n"]},"metadata":{},"sourceType":"module"}