{"ast":null,"code":"import { initDatabase } from \"../../utils/mongodb\"; // async api endpoint to retrieve all songs\n\nexport async function getSongs() {\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n  return users.find({}).toArray(); // { } document returns ALL documents in database\n} // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nasync function createSong(req) {\n  const song = req.body; // if the song passed is null\n  // deal with this edge case\n\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\"); // set name to be of song\n\n  const toAdd = {\n    _id: song.name,\n    song\n  };\n  console.log(\"ADDED: \" + toAdd);\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  }; // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n\n  const result = await users.findOneAndUpdate(toAdd, mutation, {\n    upsert: true,\n    // allows for insertion of new document\n    returnOriginal: false\n  });\n  console.log(result.value);\n  return result.value; // return the song object\n}\n\nasync function performAction(req) {\n  console.log(\"server got the request! \" + req.method);\n\n  if (req.method == \"GET\") {\n    return getSongs();\n  } else if (req.method == \"POST\") {\n    return createSong(req);\n  }\n\n  console.log(\"requesting endpoing \" + req.method); // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n\n  throw {\n    status: 405\n  };\n}\n\nexport default performAction;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/index.js"],"names":["initDatabase","getSongs","client","users","collection","find","toArray","createSong","req","song","body","status","message","toAdd","_id","name","console","log","mutation","$setOnInsert","result","findOneAndUpdate","upsert","returnOriginal","value","performAction","method"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B,C,CAEA;;AACA,OAAO,eAAeC,QAAf,GAA0B;AAC/B,QAAMC,MAAM,GAAG,MAAMF,YAAY,EAAjC;AACA,QAAMG,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,EAAX,EAAeC,OAAf,EAAP,CAH+B,CAGE;AAClC,C,CAED;AACA;;AACA,eAAeC,UAAf,CAA0BC,GAA1B,EAA+B;AAC7B,QAAMC,IAAI,GAAGD,GAAG,CAACE,IAAjB,CAD6B,CAE7B;AACA;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,UAAM;AACJE,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GAT4B,CAW7B;;;AACA,QAAMV,MAAM,GAAG,MAAMF,YAAY,EAAjC;AACA,QAAMG,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd,CAb6B,CAe7B;;AACA,QAAMS,KAAK,GAAG;AACZC,IAAAA,GAAG,EAAEL,IAAI,CAACM,IADE;AAEZN,IAAAA;AAFY,GAAd;AAIAO,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYJ,KAAxB;AAEA,QAAMK,QAAQ,GAAG;AACf;AACA;AACAC,IAAAA,YAAY,EAAE;AACZV,MAAAA;AADY;AAHC,GAAjB,CAtB6B,CA8B7B;AACA;AACA;;AACA,QAAMW,MAAM,GAAG,MAAMjB,KAAK,CAACkB,gBAAN,CAAuBR,KAAvB,EAA8BK,QAA9B,EAAwC;AAC3DI,IAAAA,MAAM,EAAE,IADmD;AAC7C;AACdC,IAAAA,cAAc,EAAE;AAF2C,GAAxC,CAArB;AAIAP,EAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACI,KAAnB;AACA,SAAOJ,MAAM,CAACI,KAAd,CAtC6B,CAsCR;AACtB;;AAED,eAAeC,aAAf,CAA6BjB,GAA7B,EAAkC;AAChCQ,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BT,GAAG,CAACkB,MAA7C;;AACA,MAAIlB,GAAG,CAACkB,MAAJ,IAAc,KAAlB,EAAyB;AACvB,WAAOzB,QAAQ,EAAf;AACD,GAFD,MAEO,IAAIO,GAAG,CAACkB,MAAJ,IAAc,MAAlB,EAA0B;AAC/B,WAAOnB,UAAU,CAACC,GAAD,CAAjB;AACD;;AACDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBT,GAAG,CAACkB,MAAzC,EAPgC,CAShC;AACA;AACA;AACA;AACA;;AACA,QAAM;AAAEf,IAAAA,MAAM,EAAE;AAAV,GAAN;AACD;;AAED,eAAec,aAAf","sourcesContent":["import { initDatabase } from \"../../utils/mongodb\";\n\n// async api endpoint to retrieve all songs\nexport async function getSongs() {\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n  return users.find({}).toArray(); // { } document returns ALL documents in database\n}\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nasync function createSong(req) {\n  const song = req.body;\n  // if the song passed is null\n  // deal with this edge case\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n\n  // create MongoDB client as well as reference to MongoDB collection\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n\n  // set name to be of song\n  const toAdd = {\n    _id: song.name,\n    song\n  };\n  console.log(\"ADDED: \" + toAdd);\n\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  };\n\n  // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n  const result = await users.findOneAndUpdate(toAdd, mutation, {\n    upsert: true, // allows for insertion of new document\n    returnOriginal: false\n  });\n  console.log(result.value);\n  return result.value; // return the song object\n}\n\nasync function performAction(req) {\n  console.log(\"server got the request! \" + req.method);\n  if (req.method == \"GET\") {\n    return getSongs();\n  } else if (req.method == \"POST\") {\n    return createSong(req);\n  }\n  console.log(\"requesting endpoing \" + req.method);\n\n  // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n  throw { status: 405 };\n}\n\nexport default performAction;\n"]},"metadata":{},"sourceType":"module"}