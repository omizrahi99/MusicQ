{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Retrieve.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useState } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport Table from \"./Table\";\nimport \"./style.css\"; //create your forceUpdate hook\n\nfunction useForceUpdate() {\n  const {\n    0: value,\n    1: setValue\n  } = useState(0); // integer state\n\n  return () => setValue(value => ++value); // update the state to force render\n}\n\nexport default function Retrieve(props) {\n  // swr returns a data and error parameter\n  // const forceUpdate = useForceUpdate();\n  // const { data, error } = useSWR(\"/api/all\", fetch, {\n  //   // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n  //   // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n  //   // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n  //   revalidateOnFocus: false,\n  //   revalidateOnReconnect: false\n  // });\n  // if (error) {\n  //   return <div>Failed to load</div>;\n  // }\n  // if (!data) {\n  //   return <div>Loading</div>;\n  // }\n  let songQueue;\n\n  if (!props.data.result) {\n    songQueue = [{\n      _id: \"s_0\",\n      song: {\n        song: \"loading\",\n        score: 0\n      }\n    }];\n  } else {\n    songQueue = props.data.result;\n  }\n\n  let obj = JSON.parse(JSON.stringify(songQueue));\n  const tableComponents = obj.map(item => {\n    return __jsx(Table, {\n      key: item._id,\n      song: item.song.song,\n      score: item.song.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    });\n  }); // {data} can't do this with Javascript objects\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Song\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Score\")), tableComponents)), __jsx(\"button\", {\n    onClick: forceUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Update me \"));\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Retrieve.js"],"names":["React","useState","useSWR","fetch","Table","useForceUpdate","value","setValue","Retrieve","props","songQueue","data","result","_id","song","score","obj","JSON","parse","stringify","tableComponents","map","item","forceUpdate"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,aAAP,C,CAEA;;AACA,SAASC,cAAT,GAA0B;AACxB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC,CADwB,CACe;;AACvC,SAAO,MAAMM,QAAQ,CAACD,KAAK,IAAI,EAAEA,KAAZ,CAArB,CAFwB,CAEiB;AAC1C;;AAED,eAAe,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAIC,SAAJ;;AACA,MAAI,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAhB,EAAwB;AACtBF,IAAAA,SAAS,GAAG,CAAC;AAAEG,MAAAA,GAAG,EAAE,KAAP;AAAcC,MAAAA,IAAI,EAAE;AAAEA,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,KAAK,EAAE;AAA1B;AAApB,KAAD,CAAZ;AACD,GAFD,MAEO;AACLL,IAAAA,SAAS,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAvB;AACD;;AAED,MAAII,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,SAAf,CAAX,CAAV;AACA,QAAMU,eAAe,GAAGJ,GAAG,CAACK,GAAJ,CAAQC,IAAI,IAAI;AACtC,WACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,IAAI,CAACT,GAAjB;AAAsB,MAAA,IAAI,EAAES,IAAI,CAACR,IAAL,CAAUA,IAAtC;AAA4C,MAAA,KAAK,EAAEQ,IAAI,CAACR,IAAL,CAAUC,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJuB,CAAxB,CA3BsC,CAiCtC;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CADF,EAKGK,eALH,CADF,CADF,EAUE;AAAQ,IAAA,OAAO,EAAEG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,CADF;AAcD","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport Table from \"./Table\";\nimport \"./style.css\";\n\n//create your forceUpdate hook\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => ++value); // update the state to force render\n}\n\nexport default function Retrieve(props) {\n  // swr returns a data and error parameter\n  // const forceUpdate = useForceUpdate();\n  // const { data, error } = useSWR(\"/api/all\", fetch, {\n  //   // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n  //   // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n  //   // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n  //   revalidateOnFocus: false,\n  //   revalidateOnReconnect: false\n  // });\n\n  // if (error) {\n  //   return <div>Failed to load</div>;\n  // }\n\n  // if (!data) {\n  //   return <div>Loading</div>;\n  // }\n\n  let songQueue;\n  if (!props.data.result) {\n    songQueue = [{ _id: \"s_0\", song: { song: \"loading\", score: 0 } }];\n  } else {\n    songQueue = props.data.result;\n  }\n\n  let obj = JSON.parse(JSON.stringify(songQueue));\n  const tableComponents = obj.map(item => {\n    return (\n      <Table key={item._id} song={item.song.song} score={item.song.score} />\n    );\n  });\n\n  // {data} can't do this with Javascript objects\n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <th>Song</th>\n            <th>Score</th>\n          </tr>\n          {tableComponents}\n        </tbody>\n      </table>\n      <button onClick={forceUpdate}>Update me </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}