{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction Table(props) {\n  // handles changes to the score of each of song dynamically\n  var changeScore = useCallback(function _callee(event) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // the body of this song is built from state\n              body: JSON.stringify({\n                song: name,\n                score: score\n              })\n            }));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(mutate());\n\n          case 4:\n            // update sent\n            setSent(true);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [name, score]);\n  return __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, props.song), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, props.score), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      props;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"upvote\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"downvote\")));\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js"],"names":["Table","props","changeScore","useCallback","event","fetch","method","headers","body","JSON","stringify","song","name","score","mutate","setSent"],"mappings":";;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB;AACA,MAAMC,WAAW,GAAGC,WAAW,CAC7B,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQC,KAAK,CAAC,UAAD,EAAa;AACtBC,cAAAA,MAAM,EAAE,MADc;AAEtBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFa;AAKtB;AACAC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,IAAI,EAAEC,IADa;AAEnBC,gBAAAA,KAAK,EAAEA;AAFY,eAAf;AANgB,aAAb,CADb;;AAAA;AAAA;AAAA,6CAcQC,MAAM,EAdd;;AAAA;AAgBE;AACAC,YAAAA,OAAO,CAAC,IAAD,CAAP;;AAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD6B,EAoB7B,CAACH,IAAD,EAAOC,KAAP,CApB6B,CAA/B;AAuBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKZ,KAAK,CAACU,IAAX,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKV,KAAK,CAACY,KAAX,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,OAAO,EAAE,mBAAM;AACbZ,MAAAA,KAAK;AACN,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAHF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAZF,CADF;AAkBD;;AAED,eAAeD,KAAf","sourcesContent":["function Table(props) {\n  // handles changes to the score of each of song dynamically\n  const changeScore = useCallback(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          song: name,\n          score: score\n        })\n      });\n\n      // forces a call to the hook useSWR\n      await mutate();\n\n      // update sent\n      setSent(true);\n    },\n    [name, score]\n  );\n\n  return (\n    <tr>\n      <td>{props.song}</td>\n      <td>{props.score}</td>\n      <td>\n        <button\n          onClick={() => {\n            props;\n          }}\n        >\n          upvote\n        </button>\n      </td>\n      <td>\n        <button>downvote</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}