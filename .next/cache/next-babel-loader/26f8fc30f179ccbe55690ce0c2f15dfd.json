{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nexport default function Retrieve() {\n  // swr returns a data and error parameter\n  const {\n    data,\n    error\n  } = useSWR(\"/api/add\", fetch, {\n    // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n    // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n    // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }\n  }, \"failed to load\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, \"loading...\");\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, data.songs));\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js"],"names":["Layout","useSWR","fetch","Retrieve","data","error","revalidateOnFocus","revalidateOnReconnect","songs"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBJ,MAAM,CAAC,UAAD,EAAaC,KAAb,EAAoB;AAChD;AACA;AACA;AACAI,IAAAA,iBAAiB,EAAE,KAJ6B;AAKhDC,IAAAA,qBAAqB,EAAE;AALyB,GAApB,CAA9B;AAQA,MAAIF,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAI,CAACI,KAAX,CADF,CADF;AAKD","sourcesContent":["import Layout from \"../components/Layout\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\n\nexport default function Retrieve() {\n  // swr returns a data and error parameter\n  const { data, error } = useSWR(\"/api/add\", fetch, {\n    // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n    // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n    // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  if (error) return <div>failed to load</div>;\n  if (!data) return <div>loading...</div>;\n\n  return (\n    <Layout>\n      <div>{data.songs}</div>\n    </Layout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}