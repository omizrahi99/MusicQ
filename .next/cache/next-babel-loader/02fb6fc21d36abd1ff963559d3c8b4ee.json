{"ast":null,"code":"import { initDatabase } from \"../../utils/mongodb\";\nimport { fetch } from \"../../utils/fetch\"; // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nexport default (async (req, res) => {\n  const song = req.body; // if the song passed is null\n  // deal with this edge case\n\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\"); // set name to be of song\n\n  const toAdd = {\n    song,\n    _id: song.song\n  };\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  }; // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n\n  const result = await users.findOneAndUpdate(toAdd, mutation, {\n    upsert: true,\n    // allows for insertion of new document\n    returnOriginal: false\n  });\n  res.end();\n  return result.value; // return the song object\n});","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/add.js"],"names":["initDatabase","fetch","req","res","song","body","status","message","client","users","collection","toAdd","_id","mutation","$setOnInsert","result","findOneAndUpdate","upsert","returnOriginal","end","value"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,SAASC,KAAT,QAAsB,mBAAtB,C,CAEA;AACA;;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,IAAI,GAAGF,GAAG,CAACG,IAAjB,CADiC,CAEjC;AACA;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,UAAM;AACJE,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GATgC,CAWjC;;;AACA,QAAMC,MAAM,GAAG,MAAMR,YAAY,EAAjC;AACA,QAAMS,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd,CAbiC,CAejC;;AACA,QAAMC,KAAK,GAAG;AACZP,IAAAA,IADY;AAEZQ,IAAAA,GAAG,EAAER,IAAI,CAACA;AAFE,GAAd;AAKA,QAAMS,QAAQ,GAAG;AACf;AACA;AACAC,IAAAA,YAAY,EAAE;AACZV,MAAAA;AADY;AAHC,GAAjB,CArBiC,CA6BjC;AACA;AACA;;AACA,QAAMW,MAAM,GAAG,MAAMN,KAAK,CAACO,gBAAN,CAAuBL,KAAvB,EAA8BE,QAA9B,EAAwC;AAC3DI,IAAAA,MAAM,EAAE,IADmD;AAC7C;AACdC,IAAAA,cAAc,EAAE;AAF2C,GAAxC,CAArB;AAIAf,EAAAA,GAAG,CAACgB,GAAJ;AACA,SAAOJ,MAAM,CAACK,KAAd,CArCiC,CAqCZ;AACtB,CAtCD","sourcesContent":["import { initDatabase } from \"../../utils/mongodb\";\nimport { fetch } from \"../../utils/fetch\";\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nexport default async (req, res) => {\n  const song = req.body;\n  // if the song passed is null\n  // deal with this edge case\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n\n  // create MongoDB client as well as reference to MongoDB collection\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n\n  // set name to be of song\n  const toAdd = {\n    song,\n    _id: song.song\n  };\n\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  };\n\n  // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n  const result = await users.findOneAndUpdate(toAdd, mutation, {\n    upsert: true, // allows for insertion of new document\n    returnOriginal: false\n  });\n  res.end();\n  return result.value; // return the song object\n};\n"]},"metadata":{},"sourceType":"module"}