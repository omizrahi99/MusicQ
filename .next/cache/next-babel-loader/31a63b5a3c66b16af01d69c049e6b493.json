{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input_Fun.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input_Fun() {\n  // set initial hooks to keep track of state\n  const {\n    0: score,\n    1: setScore\n  } = useState(0);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: sentDatabase,\n    1: setSent\n  } = useState(false); // useSWR is like your own state that is backed by an API call\n  // mutate w/out parameters just causes refetch of endpoint\n  // you can change the arguments with a parameter see repo\n  // for further documentation.\n\n  const {\n    data,\n    mutate\n  } = useSWR(\"/api/all\", fetch, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    initialData: {\n      result: [{\n        _id: \"s_0\",\n        song: {\n          song: \"loading\",\n          score: 0\n        }\n      }]\n    }\n  }); // re-fectch data from database for initial render\n  // React will call useEffect when dependecies change.\n  // Because it an empty arra; you call it the first time and never again\n\n  useEffect(() => {\n    mutate();\n  }, []); // useEffect --> changes to depen calls this function\n  // handles changes to name of song dynamically\n\n  const submit = useCallback(async event => {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this song is built from state\n      body: JSON.stringify({\n        song: name,\n        score: score\n      })\n    }); // forces a call to the hook useSWR\n\n    await mutate(); // update sent\n\n    setSent(true);\n  }, [name, score]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    form: \"sname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Song Name \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"sname\",\n    name: \"sname\",\n    value: name,\n    onChange: () => setName(event.target.value),\n    placeholder: \"enter song name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"button\", {\n    onClick: () => setScore(score + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Upvote\"), __jsx(\"button\", {\n    onClick: () => setScore(score - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Downvote\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: () => submit(),\n    className: \"button\",\n    style: {\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \" Save to Database \")), __jsx(\"h1\", {\n    style: {\n      display: sentDatabase ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \" \", name, \" saved to MongoDB Database\", \" \"), __jsx(Retrieve, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Input_Fun;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input_Fun.js"],"names":["React","useState","useCallback","useEffect","useSWR","fetch","Retrieve","Input_Fun","score","setScore","name","setName","sentDatabase","setSent","data","mutate","revalidateOnFocus","revalidateOnReconnect","initialData","result","_id","song","submit","event","method","headers","body","JSON","stringify","target","value","verticalAlign","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input_Fun() {\n  // set initial hooks to keep track of state\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [sentDatabase, setSent] = useState(false);\n\n  // useSWR is like your own state that is backed by an API call\n  // mutate w/out parameters just causes refetch of endpoint\n  // you can change the arguments with a parameter see repo\n  // for further documentation.\n  const { data, mutate } = useSWR(\"/api/all\", fetch, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    initialData: {\n      result: [{ _id: \"s_0\", song: { song: \"loading\", score: 0 } }]\n    }\n  });\n\n  // re-fectch data from database for initial render\n  // React will call useEffect when dependecies change.\n  // Because it an empty arra; you call it the first time and never again\n  useEffect(() => {\n    mutate();\n  }, []);\n\n  // useEffect --> changes to depen calls this function\n\n  // handles changes to name of song dynamically\n  const submit = useCallback(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          song: name,\n          score: score\n        })\n      });\n\n      // forces a call to the hook useSWR\n      await mutate();\n\n      // update sent\n      setSent(true);\n    },\n    [name, score]\n  );\n\n  return (\n    <div>\n      {/* Gather name of song */}\n      <form>\n        <label form=\"sname\">Song Name </label>\n        <input\n          type=\"text\"\n          id=\"sname\"\n          name=\"sname\"\n          value={name}\n          onChange={() => setName(event.target.value)}\n          placeholder=\"enter song name\"\n        ></input>\n      </form>\n      {/* Gather score of song */}\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>Upvote</button>\n      <button onClick={() => setScore(score - 1)}>Downvote</button>\n      <br />\n      <br />\n      {/* sumbit name and score of song to MongoDB Database*/}\n      <button\n        onClick={() => submit()}\n        className=\"button\"\n        style={{ verticalAlign: \"middle\" }}\n      >\n        {\" \"}\n        <span> Save to Database </span>\n      </button>\n      {/* Conditional rendering to display data sent to MongoDB Database*/}\n      <h1 style={{ display: sentDatabase ? \"block\" : \"none\" }}>\n        {\" \"}\n        {name} saved to MongoDB Database{\" \"}\n      </h1>\n      <Retrieve data={data} />\n    </div>\n  );\n}\n\nexport default Input_Fun;\n"]},"metadata":{},"sourceType":"module"}