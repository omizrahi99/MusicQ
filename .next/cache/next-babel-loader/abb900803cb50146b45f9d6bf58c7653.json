{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input_Fun.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useState, useCallback } from \"react\";\nimport useSWR from \"swr\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input_Fun() {\n  // handles changes to name of song dynamically\n  const submit = useCallback(async event => {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this song is built from state\n      body: JSON.stringify({\n        name: name,\n        score: score\n      })\n    });\n    await fetch(\"api/all\").then(response => {\n      console.log(\"HERE\" + response);\n    }); // const { data, error } = useSWR(\"/api/all\", fetch, {\n    //   // see example repo for explination about booleans\n    //   revalidateOnFocus: false,\n    //   revalidateOnReconnect: false\n    // });\n\n    const newSongs = {\n      result: [{\n        _id: \"s_0\",\n        song: {\n          song: \"s_0\",\n          score: 0\n        }\n      }, {\n        _id: \"s_1\",\n        song: {\n          song: \"s_1\",\n          score: 1\n        }\n      }, {\n        _id: \"s_2\",\n        song: {\n          song: \"s_2\",\n          score: 2\n        }\n      }, {\n        _id: \"s_3\",\n        song: {\n          song: \"s_3\",\n          score: 5\n        }\n      }, {\n        _id: \"s_4\",\n        song: {\n          song: \"s_4\",\n          score: 4\n        }\n      }, {\n        _id: \"s_5\",\n        song: {\n          song: \"s_5\",\n          score: 5\n        }\n      }, {\n        _id: \"s_6\",\n        song: {\n          song: \"s_6\",\n          score: 6\n        }\n      }]\n    }; // update sent\n\n    setSent(true);\n    setData(newSongs);\n  }, []); // set initial hooks to keep track of state\n\n  const {\n    0: score,\n    1: setScore\n  } = useState(0);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: sentDatabase,\n    1: setSent\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState({});\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    form: \"sname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Song Name \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"sname\",\n    name: \"sname\",\n    value: name,\n    onChange: () => setName(event.target.value),\n    placeholder: \"enter song name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"button\", {\n    onClick: () => setScore(score + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Upvote\"), __jsx(\"button\", {\n    onClick: () => setScore(score - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Downvote\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: () => submit(),\n    className: \"button\",\n    style: {\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \" Save to Database \")), __jsx(\"h1\", {\n    style: {\n      display: sentDatabase ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \" \", name, \" saved to MongoDB Database\", \" \"), __jsx(Retrieve, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Input_Fun;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input_Fun.js"],"names":["React","useState","useCallback","useSWR","fetch","Retrieve","Input_Fun","submit","event","method","headers","body","JSON","stringify","name","score","then","response","console","log","newSongs","result","_id","song","setSent","setData","setScore","setName","sentDatabase","data","target","value","verticalAlign","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useCallback } from \"react\";\nimport useSWR from \"swr\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input_Fun() {\n  // handles changes to name of song dynamically\n  const submit = useCallback(async event => {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this song is built from state\n      body: JSON.stringify({\n        name: name,\n        score: score\n      })\n    });\n\n    await fetch(\"api/all\").then(response => {\n      console.log(\"HERE\" + response);\n    });\n\n    // const { data, error } = useSWR(\"/api/all\", fetch, {\n    //   // see example repo for explination about booleans\n    //   revalidateOnFocus: false,\n    //   revalidateOnReconnect: false\n    // });\n\n    const newSongs = {\n      result: [\n        { _id: \"s_0\", song: { song: \"s_0\", score: 0 } },\n        { _id: \"s_1\", song: { song: \"s_1\", score: 1 } },\n        { _id: \"s_2\", song: { song: \"s_2\", score: 2 } },\n        { _id: \"s_3\", song: { song: \"s_3\", score: 5 } },\n        { _id: \"s_4\", song: { song: \"s_4\", score: 4 } },\n        { _id: \"s_5\", song: { song: \"s_5\", score: 5 } },\n        { _id: \"s_6\", song: { song: \"s_6\", score: 6 } }\n      ]\n    };\n\n    // update sent\n    setSent(true);\n    setData(newSongs);\n  }, []);\n\n  // set initial hooks to keep track of state\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [sentDatabase, setSent] = useState(false);\n  const [data, setData] = useState({});\n\n  return (\n    <div>\n      {/* Gather name of song */}\n      <form>\n        <label form=\"sname\">Song Name </label>\n        <input\n          type=\"text\"\n          id=\"sname\"\n          name=\"sname\"\n          value={name}\n          onChange={() => setName(event.target.value)}\n          placeholder=\"enter song name\"\n        ></input>\n      </form>\n\n      {/* Gather score of song */}\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>Upvote</button>\n      <button onClick={() => setScore(score - 1)}>Downvote</button>\n      <br />\n      <br />\n\n      {/* sumbit name and score of song to MongoDB Database*/}\n      <button\n        onClick={() => submit()}\n        className=\"button\"\n        style={{ verticalAlign: \"middle\" }}\n      >\n        {\" \"}\n        <span> Save to Database </span>\n      </button>\n\n      {/* Conditional rendering to display data sent to MongoDB Database*/}\n      <h1 style={{ display: sentDatabase ? \"block\" : \"none\" }}>\n        {\" \"}\n        {name} saved to MongoDB Database{\" \"}\n      </h1>\n      <Retrieve data={data} />\n    </div>\n  );\n}\n\nexport default Input_Fun;\n"]},"metadata":{},"sourceType":"module"}