{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport Table from \"../components/Table\";\nexport default function Retrieve() {\n  // swr returns a data and error parameter\n  const {\n    data,\n    error\n  } = useSWR(\"/api/all\", fetch, {\n    // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n    // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n    // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    }, \"Failed to load\");\n  }\n\n  if (!data) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, \"Loading\");\n  }\n\n  let obj = JSON.parse(JSON.stringify(data.result));\n  const tableComponents = obj.map(item => {\n    console.log(item.song.name);\n    return __jsx(Table, {\n      song: item.song.name,\n      score: item.song.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    });\n  }); // {data} can't do this with Javascript objects\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }\n  }, JSON.stringify(data.result));\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js"],"names":["useSWR","fetch","Table","Retrieve","data","error","revalidateOnFocus","revalidateOnReconnect","obj","JSON","parse","stringify","result","tableComponents","map","item","console","log","song","name","score"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBL,MAAM,CAAC,UAAD,EAAaC,KAAb,EAAoB;AAChD;AACA;AACA;AACAK,IAAAA,iBAAiB,EAAE,KAJ6B;AAKhDC,IAAAA,qBAAqB,EAAE;AALyB,GAApB,CAA9B;;AAQA,MAAIF,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAED,MAAI,CAACD,IAAL,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACD;;AAED,MAAII,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,IAAI,CAACQ,MAApB,CAAX,CAAV;AAEA,QAAMC,eAAe,GAAGL,GAAG,CAACM,GAAJ,CAAQC,IAAI,IAAI;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAL,CAAUC,IAAtB;AACA,WAAO,MAAC,KAAD;AAAO,MAAA,IAAI,EAAEJ,IAAI,CAACG,IAAL,CAAUC,IAAvB;AAA6B,MAAA,KAAK,EAAEJ,IAAI,CAACG,IAAL,CAAUE,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAHuB,CAAxB,CApBiC,CAyBjC;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMX,IAAI,CAACE,SAAL,CAAeP,IAAI,CAACQ,MAApB,CAAN,CAAP;AACD","sourcesContent":["import useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport Table from \"../components/Table\";\n\nexport default function Retrieve() {\n  // swr returns a data and error parameter\n  const { data, error } = useSWR(\"/api/all\", fetch, {\n    // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n    // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n    // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  if (error) {\n    return <div>Failed to load</div>;\n  }\n\n  if (!data) {\n    return <div>Loading</div>;\n  }\n\n  let obj = JSON.parse(JSON.stringify(data.result));\n\n  const tableComponents = obj.map(item => {\n    console.log(item.song.name);\n    return <Table song={item.song.name} score={item.song.score} />;\n  });\n\n  // {data} can't do this with Javascript objects\n  return <div>{JSON.stringify(data.result)}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}