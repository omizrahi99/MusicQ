{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input() {\n  // set initial hooks to keep track of state\n  var _useState = useState(0),\n      score = _useState[0],\n      setScore = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(false),\n      sentDatabase = _useState3[0],\n      setSent = _useState3[1]; // useSWR is like your own state that is backed by an API call\n  // mutate w/out parameters just causes refetch of endpoint\n  // you can change the arguments with a parameter see repo\n  // for further documentation.\n\n\n  var _useSWR = useSWR(\"/api/all\", fetch, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    initialData: {\n      result: [{\n        _id: \"FETCHING DATA ... \",\n        song: {\n          song: \"FETCHING DATA ... \",\n          score: 0\n        }\n      }]\n    }\n  }),\n      data = _useSWR.data,\n      mutate = _useSWR.mutate; // re-fectch data from database for initial render. mutate() does this\n  // because it is the function that references the data hook above\n  // React will call useEffect when any of the dependecies change.\n  // Because it an empty array; you call it the first time and never again\n\n\n  useEffect(function () {\n    mutate();\n  }, []);\n\n  function updateScore(name, score) {\n    console.log(name + \"_\" + score);\n  } // handles changes to name of song dynamically\n\n\n  var submit = useCallback(function _callee(event) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // the body of this song is built from state\n              body: JSON.stringify({\n                song: name,\n                score: score\n              })\n            }));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(mutate());\n\n          case 4:\n            // update sent\n            setSent(true);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [name, score]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    form: \"sname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Song Name \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"sname\",\n    name: \"sname\",\n    value: name,\n    onChange: function onChange() {\n      return setName(event.target.value);\n    },\n    placeholder: \"enter song name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setScore(score + 1);\n    },\n    className: \"button_upvote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Upvote\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      if (score > 0) setScore(score - 1);\n    },\n    className: \"button_downvote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Downvote\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return submit();\n    },\n    className: \"button\",\n    style: {\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \" Save to Database \")), __jsx(Retrieve, {\n    data: data,\n    upvote: this.updateScore,\n    downvote: this.updateScore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Input;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input.js"],"names":["React","useState","useCallback","useEffect","useSWR","fetch","Retrieve","Input","score","setScore","name","setName","sentDatabase","setSent","revalidateOnFocus","revalidateOnReconnect","initialData","result","_id","song","data","mutate","updateScore","console","log","submit","event","method","headers","body","JSON","stringify","target","value","verticalAlign"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input() {\n  // set initial hooks to keep track of state\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [sentDatabase, setSent] = useState(false);\n\n  // useSWR is like your own state that is backed by an API call\n  // mutate w/out parameters just causes refetch of endpoint\n  // you can change the arguments with a parameter see repo\n  // for further documentation.\n  const { data, mutate } = useSWR(\"/api/all\", fetch, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    initialData: {\n      result: [\n        {\n          _id: \"FETCHING DATA ... \",\n          song: { song: \"FETCHING DATA ... \", score: 0 }\n        }\n      ]\n    }\n  });\n\n  // re-fectch data from database for initial render. mutate() does this\n  // because it is the function that references the data hook above\n  // React will call useEffect when any of the dependecies change.\n  // Because it an empty array; you call it the first time and never again\n  useEffect(() => {\n    mutate();\n  }, []);\n\n  function updateScore(name, score) {\n    console.log(name + \"_\" + score);\n  }\n\n  // handles changes to name of song dynamically\n  const submit = useCallback(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          song: name,\n          score: score\n        })\n      });\n\n      // forces a call to the hook useSWR\n      await mutate();\n\n      // update sent\n      setSent(true);\n    },\n    [name, score]\n  );\n\n  return (\n    <div>\n      {/* Gather name of song */}\n      <form>\n        <label form=\"sname\">Song Name </label>\n        <input\n          type=\"text\"\n          id=\"sname\"\n          name=\"sname\"\n          value={name}\n          onChange={() => setName(event.target.value)}\n          placeholder=\"enter song name\"\n        ></input>\n      </form>\n      {/* Gather score of song */}\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)} className=\"button_upvote\">\n        Upvote\n      </button>\n      <button\n        onClick={() => {\n          if (score > 0) setScore(score - 1);\n        }}\n        className=\"button_downvote\"\n      >\n        Downvote\n      </button>\n      {/* sumbit name and score of song to MongoDB Database*/}\n      <button\n        onClick={() => submit()}\n        className=\"button\"\n        style={{ verticalAlign: \"middle\" }}\n      >\n        {\" \"}\n        <span> Save to Database </span>\n      </button>\n      <Retrieve\n        data={data}\n        upvote={this.updateScore}\n        downvote={this.updateScore}\n      />\n    </div>\n  );\n}\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}