{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useCallback, useEffect } from \"react\";\nimport { fetch } from \"../utils/fetch\";\nexport default function Table(props) {\n  var _useState = useState(props.score),\n      score = _useState[0],\n      setScore = _useState[1]; // this callback renders the score when intially\n  // rendered\n\n\n  useEffect(function () {\n    setScore(props.score);\n  }, [props.score]); // handles changes when upvoting score of each of song dynamically\n\n  var increment = useCallback(function _callee(event) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/increment\", {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // the body of this song is built from state\n              body: JSON.stringify({\n                name: props.name\n              })\n            }));\n\n          case 2:\n            // forces a call to the hook useSWR\n            props.mutate();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [score]); // handles changes when downvoting score of each of song dynamically\n\n  var decrement = useCallback(function _callee2(event) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/decrement\", {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // the body of this song is built from state\n              body: JSON.stringify({\n                name: props.name\n              })\n            }));\n\n          case 2:\n            // forces a call to the hook useSWR\n            props.mutate();\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [score]);\n  return __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, props.name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      setScore(score + 1);\n      increment();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"upvote\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    className: \"button_upvote\",\n    onClick: function onClick() {\n      if (score > 0) {\n        setScore(score - 1);\n      }\n\n      decrement();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \" \", \"downvote\")));\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js"],"names":["useState","useCallback","useEffect","fetch","Table","props","score","setScore","increment","event","method","headers","body","JSON","stringify","name","mutate","decrement"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,kBACTL,QAAQ,CAACK,KAAK,CAACC,KAAP,CADC;AAAA,MAC5BA,KAD4B;AAAA,MACrBC,QADqB,iBAGnC;AACA;;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,QAAQ,CAACF,KAAK,CAACC,KAAP,CAAR;AACD,GAFQ,EAEN,CAACD,KAAK,CAACC,KAAP,CAFM,CAAT,CALmC,CASnC;;AACA,MAAME,SAAS,GAAGP,WAAW,CAC3B,iBAAMQ,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQN,KAAK,CAAC,gBAAD,EAAmB;AAC5BO,cAAAA,MAAM,EAAE,KADoB;AAE5BC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFmB;AAK5B;AACAC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,IAAI,EAAEV,KAAK,CAACU;AADO,eAAf;AANsB,aAAnB,CADb;;AAAA;AAWE;AACAV,YAAAA,KAAK,CAACW,MAAN;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD2B,EAe3B,CAACV,KAAD,CAf2B,CAA7B,CAVmC,CA4BnC;;AACA,MAAMW,SAAS,GAAGhB,WAAW,CAC3B,kBAAMQ,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQN,KAAK,CAAC,gBAAD,EAAmB;AAC5BO,cAAAA,MAAM,EAAE,KADoB;AAE5BC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFmB;AAK5B;AACAC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,IAAI,EAAEV,KAAK,CAACU;AADO,eAAf;AANsB,aAAnB,CADb;;AAAA;AAWE;AACAV,YAAAA,KAAK,CAACW,MAAN;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD2B,EAe3B,CAACV,KAAD,CAf2B,CAA7B;AAkBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACU,IAAX,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,KAAL,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AACE,IAAA,OAAO,EAAE,mBAAM;AACbC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAE,MAAAA,SAAS;AACV,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAJF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,OAAO,EAAE,mBAAM;AACb,UAAIF,KAAK,GAAG,CAAZ,EAAe;AACbC,QAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AACDW,MAAAA,SAAS;AACV,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,GATH,aAFF,CAfF,CADF;AAiCD","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport { fetch } from \"../utils/fetch\";\n\nexport default function Table(props) {\n  const [score, setScore] = useState(props.score);\n\n  // this callback renders the score when intially\n  // rendered\n  useEffect(() => {\n    setScore(props.score);\n  }, [props.score]);\n\n  // handles changes when upvoting score of each of song dynamically\n  const increment = useCallback(\n    async event => {\n      await fetch(\"/api/increment\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          name: props.name\n        })\n      });\n      // forces a call to the hook useSWR\n      props.mutate();\n    },\n    [score]\n  );\n\n  // handles changes when downvoting score of each of song dynamically\n  const decrement = useCallback(\n    async event => {\n      await fetch(\"/api/decrement\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          name: props.name\n        })\n      });\n      // forces a call to the hook useSWR\n      props.mutate();\n    },\n    [score]\n  );\n\n  return (\n    <tr>\n      {/* output name and score of song*/}\n      <td>{props.name}</td>\n      <td>{score}</td>\n      <td>\n        {/* button to upvote*/}\n        <button\n          onClick={() => {\n            setScore(score + 1);\n            increment();\n          }}\n        >\n          upvote\n        </button>\n      </td>\n      <td>\n        {/* button to downvote. Cannot be < 0*/}\n        <button\n          className=\"button_upvote\"\n          onClick={() => {\n            if (score > 0) {\n              setScore(score - 1);\n            }\n            decrement();\n          }}\n        >\n          {\" \"}\n          downvote\n        </button>\n      </td>\n    </tr>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}