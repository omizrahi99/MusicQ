{"ast":null,"code":"import { MongoClient } from \"mongodb\";\nimport config from \"./config\";\nconst client = new MongoClient(config.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nlet connected = false;\nexport async function initDatabase() {\n  if (!connected) {\n    await client.connect();\n    connected = true;\n  }\n\n  return client.db(\"database\");\n}\nexport function serializeDocument(doc, options = {}) {\n  // TODO remove side effects\n  const {\n    idFields = [\"_id\"]\n  } = options;\n\n  for (const idField of idFields) {\n    if (doc[idField]) {\n      doc[idField] = doc[idField].toString();\n    }\n  }\n\n  return doc;\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/utils/mongodb.js"],"names":["MongoClient","config","client","MONGODB_URI","useNewUrlParser","useUnifiedTopology","connected","initDatabase","connect","db","serializeDocument","doc","options","idFields","idField","toString"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBC,MAAM,CAACE,WAAvB,EAAoC;AACjDC,EAAAA,eAAe,EAAE,IADgC;AAEjDC,EAAAA,kBAAkB,EAAE;AAF6B,CAApC,CAAf;AAIA,IAAIC,SAAS,GAAG,KAAhB;AAEA,OAAO,eAAeC,YAAf,GAA8B;AACnC,MAAI,CAACD,SAAL,EAAgB;AACd,UAAMJ,MAAM,CAACM,OAAP,EAAN;AACAF,IAAAA,SAAS,GAAG,IAAZ;AACD;;AACD,SAAOJ,MAAM,CAACO,EAAP,CAAU,UAAV,CAAP;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AACnD;AACA,QAAM;AAAEC,IAAAA,QAAQ,GAAG,CAAC,KAAD;AAAb,MAAyBD,OAA/B;;AAEA,OAAK,MAAME,OAAX,IAAsBD,QAAtB,EAAgC;AAC9B,QAAIF,GAAG,CAACG,OAAD,CAAP,EAAkB;AAChBH,MAAAA,GAAG,CAACG,OAAD,CAAH,GAAeH,GAAG,CAACG,OAAD,CAAH,CAAaC,QAAb,EAAf;AACD;AACF;;AAED,SAAOJ,GAAP;AACD","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport config from \"./config\";\n\nconst client = new MongoClient(config.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nlet connected = false;\n\nexport async function initDatabase() {\n  if (!connected) {\n    await client.connect();\n    connected = true;\n  }\n  return client.db(\"database\");\n}\n\nexport function serializeDocument(doc, options = {}) {\n  // TODO remove side effects\n  const { idFields = [\"_id\"] } = options;\n\n  for (const idField of idFields) {\n    if (doc[idField]) {\n      doc[idField] = doc[idField].toString();\n    }\n  }\n\n  return doc;\n}\n"]},"metadata":{},"sourceType":"module"}