{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport useSWR from \"swr\";\n\nclass Retrive extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      songs: []\n    };\n  }\n\n  render() {\n    const {\n      data,\n      error\n    } = useSWR(\"/api/all\", fetch, {\n      // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n      // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n      // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false\n    });\n    if (error) return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 23\n      }\n    }, \"failed to load\");\n    if (!data) return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 23\n      }\n    }, \"loading...\");\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, data.songs));\n  }\n\n}\n\nexport default Retrive;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js"],"names":["Layout","useSWR","Retrive","React","Component","constructor","state","songs","render","data","error","fetch","revalidateOnFocus","revalidateOnReconnect"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,OAAN,SAAsBC,KAAK,CAACC,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBT,MAAM,CAAC,UAAD,EAAaU,KAAb,EAAoB;AAChD;AACA;AACA;AACAC,MAAAA,iBAAiB,EAAE,KAJ6B;AAKhDC,MAAAA,qBAAqB,EAAE;AALyB,KAApB,CAA9B;AAQA,QAAIH,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACX,QAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAEX,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,IAAI,CAACF,KAAX,CADF,CADF;AAKD;;AAzBmC;;AA4BtC,eAAeL,OAAf","sourcesContent":["import Layout from \"../components/Layout\";\nimport useSWR from \"swr\";\n\nclass Retrive extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      songs: []\n    };\n  }\n\n  render() {\n    const { data, error } = useSWR(\"/api/all\", fetch, {\n      // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n      // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n      // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false\n    });\n\n    if (error) return <div>failed to load</div>;\n    if (!data) return <div>loading...</div>;\n\n    return (\n      <Layout>\n        <div>{data.songs}</div>\n      </Layout>\n    );\n  }\n}\n\nexport default Retrive;\n"]},"metadata":{},"sourceType":"module"}