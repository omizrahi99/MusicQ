{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Layout from \"../components/Layout\";\nimport useSWR from \"swr\";\n\nvar Retrive = /*#__PURE__*/function (_React$Component) {\n  _inherits(Retrive, _React$Component);\n\n  var _super = _createSuper(Retrive);\n\n  function Retrive() {\n    var _this;\n\n    _classCallCheck(this, Retrive);\n\n    _this = _super.call(this);\n    _this.state = {\n      songs: []\n    };\n    return _this;\n  }\n\n  _createClass(Retrive, [{\n    key: \"render\",\n    value: function render() {\n      var _useSWR = useSWR(\"/api/all\", fetch, {\n        // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n        // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n        // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n        revalidateOnFocus: false,\n        revalidateOnReconnect: false\n      }),\n          data = _useSWR.data;\n\n      if (error) return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 23\n        }\n      }, \"failed to load\");\n      if (!data) return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 23\n        }\n      }, \"loading...\");\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, data.songs));\n    }\n  }]);\n\n  return Retrive;\n}(React.Component);\n\nexport default Retrive;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/Retrieve.js"],"names":["Layout","useSWR","Retrive","state","songs","fetch","revalidateOnFocus","revalidateOnReconnect","data","error","React","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;IAEMC,O;;;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAFY;AAKb;;;;6BAEQ;AAAA,oBACUH,MAAM,CAAC,UAAD,EAAaI,KAAb,EAAoB;AACzC;AACA;AACA;AACAC,QAAAA,iBAAiB,EAAE,KAJsB;AAKzCC,QAAAA,qBAAqB,EAAE;AALkB,OAApB,CADhB;AAAA,UACCC,IADD,WACCA,IADD;;AASP,UAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACX,UAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AAEX,aACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,IAAI,CAACJ,KAAX,CADF,CADF;AAKD;;;;EAzBmBM,KAAK,CAACC,S;;AA4B5B,eAAeT,OAAf","sourcesContent":["import Layout from \"../components/Layout\";\nimport useSWR from \"swr\";\n\nclass Retrive extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      songs: []\n    };\n  }\n\n  render() {\n    const { data } = useSWR(\"/api/all\", fetch, {\n      // By default, useSWR will call the endpoint we specified (in this case, /api/all) every time we click away from\n      // the page. This can be really useful if we want to make sure the web app is always showing the latest data,\n      // but in this case, we don't need that behavior. See what happens if you set these options to true or remove them!\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false\n    });\n\n    if (error) return <div>failed to load</div>;\n    if (!data) return <div>loading...</div>;\n\n    return (\n      <Layout>\n        <div>{data.songs}</div>\n      </Layout>\n    );\n  }\n}\n\nexport default Retrive;\n"]},"metadata":{},"sourceType":"module"}