{"ast":null,"code":"import { initDatabase } from \"../../utils/mongodb\"; // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nasync function createSong(req, res) {\n  const song = req.body;\n  console.log(\"adding \" + song.name); // if the song passed is null\n  // deal with this edge case\n\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n  const query = song.name;\n  const mutation = {\n    // If an update operation with upsert: true results in an insert of a document,\n    // then $setOnInsert assigns the specified values to the fields\n    // in the document. If the update operation does not result in an insert, $setOnInsert does nothing.\n    $setOnInsert: {\n      song\n    },\n    // The $set operator replaces the value of a field with the specified value.\n    $set: {\n      score: song.score\n    }\n  }; // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n\n  const result = await users.findOneAndUpdate({\n    name: song.name\n  }, mutation, {\n    upsert: true,\n    // allows for insertion of new document\n    returnOriginal: false\n  });\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({\n    result\n  }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"POST\") {\n    return createSong(req, res);\n  } // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n\n\n  throw {\n    status: 405\n  };\n}\n\nexport default performAction;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/add.js"],"names":["initDatabase","createSong","req","res","song","body","console","log","name","status","message","client","users","collection","query","mutation","$setOnInsert","$set","score","result","findOneAndUpdate","upsert","returnOriginal","statusCode","setHeader","end","JSON","stringify","performAction","method"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B,C,CAEA;AACA;;AACA,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AAClC,QAAMC,IAAI,GAAGF,GAAG,CAACG,IAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,IAAI,CAACI,IAA7B,EAFkC,CAGlC;AACA;;AACA,MAAI,CAACJ,IAAL,EAAW;AACT,UAAM;AACJK,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GAViC,CAWlC;;;AACA,QAAMC,MAAM,GAAG,MAAMX,YAAY,EAAjC;AACA,QAAMY,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd;AAEA,QAAMC,KAAK,GAAGV,IAAI,CAACI,IAAnB;AAEA,QAAMO,QAAQ,GAAG;AACf;AACA;AACA;AACAC,IAAAA,YAAY,EAAE;AACZZ,MAAAA;AADY,KAJC;AAOf;AACAa,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAEd,IAAI,CAACc;AADR;AARS,GAAjB,CAjBkC,CA8BlC;AACA;AACA;;AACA,QAAMC,MAAM,GAAG,MAAMP,KAAK,CAACQ,gBAAN,CAAuB;AAAEZ,IAAAA,IAAI,EAAEJ,IAAI,CAACI;AAAb,GAAvB,EAA4CO,QAA5C,EAAsD;AACzEM,IAAAA,MAAM,EAAE,IADiE;AAC3D;AACdC,IAAAA,cAAc,EAAE;AAFyD,GAAtD,CAArB;AAKAnB,EAAAA,GAAG,CAACoB,UAAJ,GAAiB,GAAjB;AACApB,EAAAA,GAAG,CAACqB,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACArB,EAAAA,GAAG,CAACsB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA;AAAF,GAAf,CAAR;AACD;;AAED,eAAeS,aAAf,CAA6B1B,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC,MAAID,GAAG,CAAC2B,MAAJ,IAAc,MAAlB,EAA0B;AACxB,WAAO5B,UAAU,CAACC,GAAD,EAAMC,GAAN,CAAjB;AACD,GAHoC,CAIrC;AACA;AACA;AACA;AACA;;;AACA,QAAM;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAAN;AACD;;AAED,eAAemB,aAAf","sourcesContent":["import { initDatabase } from \"../../utils/mongodb\";\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nasync function createSong(req, res) {\n  const song = req.body;\n  console.log(\"adding \" + song.name);\n  // if the song passed is null\n  // deal with this edge case\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n  // create MongoDB client as well as reference to MongoDB collection\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n\n  const query = song.name;\n\n  const mutation = {\n    // If an update operation with upsert: true results in an insert of a document,\n    // then $setOnInsert assigns the specified values to the fields\n    // in the document. If the update operation does not result in an insert, $setOnInsert does nothing.\n    $setOnInsert: {\n      song\n    },\n    // The $set operator replaces the value of a field with the specified value.\n    $set: {\n      score: song.score\n    }\n  };\n\n  // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n  const result = await users.findOneAndUpdate({ name: song.name }, mutation, {\n    upsert: true, // allows for insertion of new document\n    returnOriginal: false\n  });\n\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({ result }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"POST\") {\n    return createSong(req, res);\n  }\n  // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n  throw { status: 405 };\n}\n\nexport default performAction;\n"]},"metadata":{},"sourceType":"module"}