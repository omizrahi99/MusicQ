{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useCallback } from \"react\";\nimport { fetch } from \"../utils/fetch\";\nexport default function Table(props) {\n  var _useState = useState(props.song),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(props.score),\n      score = _useState2[0],\n      setScore = _useState2[1]; // // handles changes when upvoting score of each of song dynamically\n  // const updateScore = useCallback(\n  //   async event => {\n  //     await fetch(\"/api/add\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\"\n  //       },\n  //       // the body of this song is built from state\n  //       body: JSON.stringify({\n  //         song: name,\n  //         score: score\n  //       })\n  //     });\n  //     // forces a call to the hook useSWR\n  //   },\n  //   [name, score]\n  // );\n\n\n  return __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      setScore(score + 1); //updateScore();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \" \", \"upvote\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      if (score > 0) setScore(score - 1); //updateScore();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \" \", \"downvote\")));\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js"],"names":["useState","useCallback","fetch","Table","props","song","name","setName","score","setScore"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,kBACXJ,QAAQ,CAACI,KAAK,CAACC,IAAP,CADG;AAAA,MAC5BC,IAD4B;AAAA,MACtBC,OADsB;;AAAA,mBAETP,QAAQ,CAACI,KAAK,CAACI,KAAP,CAFC;AAAA,MAE5BA,KAF4B;AAAA,MAErBC,QAFqB,kBAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAL,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AACE,IAAA,OAAO,EAAE,mBAAM;AACbC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR,CADa,CAEb;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,GANH,WAFF,CAJF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AACE,IAAA,OAAO,EAAE,mBAAM;AACb,UAAIA,KAAK,GAAG,CAAZ,EAAeC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR,CADF,CAEb;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,GANH,aAFF,CAhBF,CADF;AA+BD","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { fetch } from \"../utils/fetch\";\n\nexport default function Table(props) {\n  const [name, setName] = useState(props.song);\n  const [score, setScore] = useState(props.score);\n\n  // // handles changes when upvoting score of each of song dynamically\n  // const updateScore = useCallback(\n  //   async event => {\n  //     await fetch(\"/api/add\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\"\n  //       },\n  //       // the body of this song is built from state\n  //       body: JSON.stringify({\n  //         song: name,\n  //         score: score\n  //       })\n  //     });\n  //     // forces a call to the hook useSWR\n  //   },\n  //   [name, score]\n  // );\n\n  return (\n    <tr>\n      {/* output name and score of song*/}\n      <td>{name}</td>\n      <td>{score}</td>\n      <td>\n        {/* button to upvote*/}\n        <button\n          onClick={() => {\n            setScore(score + 1);\n            //updateScore();\n          }}\n        >\n          {\" \"}\n          upvote\n        </button>\n      </td>\n      <td>\n        {/* button to downvote. Cannot be < 0*/}\n        <button\n          onClick={() => {\n            if (score > 0) setScore(score - 1);\n            //updateScore();\n          }}\n        >\n          {\" \"}\n          downvote\n        </button>\n      </td>\n    </tr>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}