{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useCallBack } from \"react\";\nimport { fetch } from \"../utils/fetch\";\n\nfunction Table(props) {\n  var _useState = useState(props.song),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(props.score),\n      score = _useState2[0],\n      setScore = _useState2[1]; // handles changes when upvoting score of each of song dynamically\n\n\n  var upvote = useCallBack(function _callee(event) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // the body of this song is built from state\n              body: JSON.stringify({\n                song: name,\n                score: score\n              })\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [name, score]);\n  return __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"onClick=\", function () {\n    return setScore(score + 1);\n  }, \"> upvote\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"onClick=\", function () {\n    return setScore(score - 1);\n  }, \"> downvote\")));\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js"],"names":["useState","useCallBack","fetch","Table","props","song","name","setName","score","setScore","upvote","event","method","headers","body","JSON","stringify"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,kBACIJ,QAAQ,CAACI,KAAK,CAACC,IAAP,CADZ;AAAA,MACbC,IADa;AAAA,MACPC,OADO;;AAAA,mBAEMP,QAAQ,CAACI,KAAK,CAACI,KAAP,CAFd;AAAA,MAEbA,KAFa;AAAA,MAENC,QAFM,kBAIpB;;;AACA,MAAMC,MAAM,GAAGT,WAAW,CACxB,iBAAMU,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQT,KAAK,CAAC,UAAD,EAAa;AACtBU,cAAAA,MAAM,EAAE,MADc;AAEtBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFa;AAKtB;AACAC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,gBAAAA,IAAI,EAAEC,IADa;AAEnBE,gBAAAA,KAAK,EAAEA;AAFY,eAAf;AANgB,aAAb,CADb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADwB,EAexB,CAACF,IAAD,EAAOE,KAAP,CAfwB,CAA1B;AAkBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,IAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB;AAAA,WAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,GAAjB,aADF,CAHF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB;AAAA,WAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,GAAjB,eADF,CANF,CADF;AAYD;;AAED,eAAeL,KAAf","sourcesContent":["import { useState, useCallBack } from \"react\";\nimport { fetch } from \"../utils/fetch\";\n\nfunction Table(props) {\n  const [name, setName] = useState(props.song);\n  const [score, setScore] = useState(props.score);\n\n  // handles changes when upvoting score of each of song dynamically\n  const upvote = useCallBack(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          song: name,\n          score: score\n        })\n      });\n      // forces a call to the hook useSWR\n    },\n    [name, score]\n  );\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{score}</td>\n      <td>\n        <button>onClick={() => setScore(score + 1)}> upvote</button>\n      </td>\n      <td>\n        <button>onClick={() => setScore(score - 1)}> downvote</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}