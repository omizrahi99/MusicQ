{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"./style.css\";\nimport Retrieve from \"../pages/Retrieve\";\nimport { Populate } from \"./Populate\";\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  var _super = _createSuper(Input);\n\n  function Input() {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _super.call(this);\n    _this.state = {\n      score: 0,\n      name: \"\",\n      sent_to_database: false,\n      data: prevState.data\n    };\n    _this.incrementScore = _this.incrementScore.bind(_assertThisInitialized(_this));\n    _this.decrementScore = _this.decrementScore.bind(_assertThisInitialized(_this));\n    _this.nameChange = _this.nameChange.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  } // increments the score of the particular song\n\n\n  _createClass(Input, [{\n    key: \"incrementScore\",\n    value: function incrementScore() {\n      this.setState(function (prevState) {\n        return {\n          score: prevState.score + 1,\n          name: prevState.name,\n          sent_to_database: false,\n          data: prevState.data\n        };\n      });\n    } // decrements the score of the particular song\n\n  }, {\n    key: \"decrementScore\",\n    value: function decrementScore() {\n      this.setState(function (prevState) {\n        // if the score is 0; don't go negative!\n        if (prevState.score == 0) {\n          return {\n            score: 0,\n            name: prevState.name,\n            sent_to_database: false,\n            data: prevState.data\n          };\n        } // score is not 0; subtract 1\n        else {\n            return {\n              score: prevState.score - 1,\n              name: prevState.name,\n              sent_to_database: false,\n              data: prevState.data\n            };\n          }\n      });\n    } // handles changes to name of song dynamically\n\n  }, {\n    key: \"nameChange\",\n    value: function nameChange() {\n      this.setState(function (prevState) {\n        return {\n          score: prevState.score,\n          name: event.target.value,\n          sent_to_database: false,\n          data: prevState.data\n        };\n      });\n    } // submit information to the MongoDB Database\n\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      var songs_in_database;\n      return _regeneratorRuntime.async(function submit$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"/api/add\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                // the body of this message is built from state\n                body: JSON.stringify({\n                  song: this.state.name,\n                  score: this.state.score\n                })\n              }));\n\n            case 2:\n              songs_in_database = Populate(); // update state to conditionally render message to user\n\n              this.setState(function (prevState) {\n                return {\n                  score: prevState.score,\n                  name: prevState.name,\n                  sent_to_database: true,\n                  data: songs_in_database\n                };\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, __jsx(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, __jsx(\"label\", {\n        form: \"sname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      }, \"Song Name \"), __jsx(\"input\", {\n        type: \"text\",\n        id: \"sname\",\n        name: \"sname\",\n        value: this.state.name,\n        onChange: this.nameChange,\n        placeholder: \"enter song name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      })), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, this.state.score), __jsx(\"button\", {\n        onClick: this.incrementScore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }, \"Upvote\"), __jsx(\"button\", {\n        onClick: this.decrementScore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, \"Downvote\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }), __jsx(\"button\", {\n        onClick: this.submit,\n        className: \"button\",\n        style: {\n          verticalAlign: \"middle\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, \" \", __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, \" Save to Database \")), __jsx(\"h1\", {\n        style: {\n          display: this.state.sent_to_database ? \"block\" : \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, \" \", this.state.name, \" saved to MongoDB Database\", \" \"), __jsx(Retrieve, {\n        data: this.props.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nexport default Input;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input.js"],"names":["React","fetch","Retrieve","Populate","Input","state","score","name","sent_to_database","data","prevState","incrementScore","bind","decrementScore","nameChange","submit","setState","event","target","value","method","headers","body","JSON","stringify","song","songs_in_database","verticalAlign","display","props","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport \"./style.css\";\nimport Retrieve from \"../pages/Retrieve\";\nimport { Populate } from \"./Populate\";\n\nclass Input extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      name: \"\",\n      sent_to_database: false,\n      data: prevState.data\n    };\n    this.incrementScore = this.incrementScore.bind(this);\n    this.decrementScore = this.decrementScore.bind(this);\n    this.nameChange = this.nameChange.bind(this);\n    this.submit = this.submit.bind(this);\n  }\n\n  // increments the score of the particular song\n  incrementScore() {\n    this.setState(prevState => {\n      return {\n        score: prevState.score + 1,\n        name: prevState.name,\n        sent_to_database: false,\n        data: prevState.data\n      };\n    });\n  }\n\n  // decrements the score of the particular song\n  decrementScore() {\n    this.setState(prevState => {\n      // if the score is 0; don't go negative!\n      if (prevState.score == 0) {\n        return {\n          score: 0,\n          name: prevState.name,\n          sent_to_database: false,\n          data: prevState.data\n        };\n      }\n      // score is not 0; subtract 1\n      else {\n        return {\n          score: prevState.score - 1,\n          name: prevState.name,\n          sent_to_database: false,\n          data: prevState.data\n        };\n      }\n    });\n  }\n\n  // handles changes to name of song dynamically\n  nameChange() {\n    this.setState(prevState => {\n      return {\n        score: prevState.score,\n        name: event.target.value,\n        sent_to_database: false,\n        data: prevState.data\n      };\n    });\n  }\n\n  // submit information to the MongoDB Database\n  async submit() {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this message is built from state\n      body: JSON.stringify({\n        song: this.state.name,\n        score: this.state.score\n      })\n    });\n\n    const songs_in_database = Populate();\n\n    // update state to conditionally render message to user\n    this.setState(prevState => {\n      return {\n        score: prevState.score,\n        name: prevState.name,\n        sent_to_database: true,\n        data: songs_in_database\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* Gather name of song */}\n        <form>\n          <label form=\"sname\">Song Name </label>\n          <input\n            type=\"text\"\n            id=\"sname\"\n            name=\"sname\"\n            value={this.state.name}\n            onChange={this.nameChange}\n            placeholder=\"enter song name\"\n          ></input>\n        </form>\n\n        {/* Gather score of song */}\n        <h1>{this.state.score}</h1>\n        <button onClick={this.incrementScore}>Upvote</button>\n        <button onClick={this.decrementScore}>Downvote</button>\n        <br />\n        <br />\n\n        {/* sumbit name and score of song to MongoDB Database*/}\n        <button\n          onClick={this.submit}\n          className=\"button\"\n          style={{ verticalAlign: \"middle\" }}\n        >\n          {\" \"}\n          <span> Save to Database </span>\n        </button>\n\n        {/* Conditional rendering to display data sent to MongoDB Database*/}\n        <h1 style={{ display: this.state.sent_to_database ? \"block\" : \"none\" }}>\n          {\" \"}\n          {this.state.name} saved to MongoDB Database{\" \"}\n        </h1>\n\n        <Retrieve data={this.props.data} />\n      </div>\n    );\n  }\n}\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}