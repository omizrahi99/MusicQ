{"ast":null,"code":"var _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useCallBack } from \"react\";\nimport { fetch } from \"../utils/fetch\";\nexport default function Table(props) {\n  const {\n    0: name,\n    1: setName\n  } = useState(props.song);\n  const {\n    0: score,\n    1: setScore\n  } = useState(props.score); // handles changes when upvoting score of each of song dynamically\n\n  const updateScore = useCallBack(async event => {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this song is built from state\n      body: JSON.stringify({\n        song: name,\n        score: score\n      })\n    }); // forces a call to the hook useSWR\n  }, [name, score]);\n  return __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: () => {\n      setScore(score + 1);\n      updateScore();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \" \", \"upvote\")), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: () => {\n      if (score > 0) setScore(score - 1);\n      updateScore();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \" \", \"downvote\")));\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Table.js"],"names":["useState","useCallBack","fetch","Table","props","name","setName","song","score","setScore","updateScore","event","method","headers","body","JSON","stringify"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAACI,KAAK,CAACG,IAAP,CAAhC;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAACI,KAAK,CAACI,KAAP,CAAlC,CAFmC,CAInC;;AACA,QAAME,WAAW,GAAGT,WAAW,CAC7B,MAAMU,KAAN,IAAe;AACb,UAAMT,KAAK,CAAC,UAAD,EAAa;AACtBU,MAAAA,MAAM,EAAE,MADc;AAEtBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFa;AAKtB;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,QAAAA,IAAI,EAAEF,IADa;AAEnBG,QAAAA,KAAK,EAAEA;AAFY,OAAf;AANgB,KAAb,CAAX,CADa,CAYb;AACD,GAd4B,EAe7B,CAACH,IAAD,EAAOG,KAAP,CAf6B,CAA/B;AAkBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,KAAL,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AACE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAE,MAAAA,WAAW;AACZ,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,GANH,WAFF,CAJF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AACE,IAAA,OAAO,EAAE,MAAM;AACb,UAAIF,KAAK,GAAG,CAAZ,EAAeC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACfE,MAAAA,WAAW;AACZ,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,GANH,aAFF,CAhBF,CADF;AA+BD","sourcesContent":["import { useState, useCallBack } from \"react\";\nimport { fetch } from \"../utils/fetch\";\n\nexport default function Table(props) {\n  const [name, setName] = useState(props.song);\n  const [score, setScore] = useState(props.score);\n\n  // handles changes when upvoting score of each of song dynamically\n  const updateScore = useCallBack(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          song: name,\n          score: score\n        })\n      });\n      // forces a call to the hook useSWR\n    },\n    [name, score]\n  );\n\n  return (\n    <tr>\n      {/* output name and score of song*/}\n      <td>{name}</td>\n      <td>{score}</td>\n      <td>\n        {/* button to upvote*/}\n        <button\n          onClick={() => {\n            setScore(score + 1);\n            updateScore();\n          }}\n        >\n          {\" \"}\n          upvote\n        </button>\n      </td>\n      <td>\n        {/* button to downvote. Cannot be < 0*/}\n        <button\n          onClick={() => {\n            if (score > 0) setScore(score - 1);\n            updateScore();\n          }}\n        >\n          {\" \"}\n          downvote\n        </button>\n      </td>\n    </tr>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}