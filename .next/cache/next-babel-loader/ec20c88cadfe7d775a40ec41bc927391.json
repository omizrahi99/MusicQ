{"ast":null,"code":"// async api endpoint to retrieve all songs\nexport async function getSongs() {\n  const MongoClient = require(\"mongodb\").MongoClient;\n\n  const uri = \"mongodb+srv://gautam_mundewadi:MusicQ@cluster0-yxuih.azure.mongodb.net/test?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri, {\n    useNewUrlParser: true\n  });\n  const users = client.db(\"Titles\").collection(\"song_name\");\n  return users.find({}).toArray(); // { } document returns ALL documents in database\n} // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nasync function createSong(req) {\n  const song = req.body; // if the song passed is null\n  // deal with this edge case\n\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const MongoClient = require(\"mongodb\").MongoClient;\n\n  const uri = \"mongodb+srv://gautam_mundewadi:MusicQ@cluster0-yxuih.azure.mongodb.net/test?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri, {\n    useNewUrlParser: true\n  });\n  const users = client.db(\"Titles\").collection(\"song_name\"); // set query to be of song\n\n  const query = {\n    song\n  };\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  }; // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n\n  const result = await users.findOneAndUpdate(query, mutation, {\n    upsert: true,\n    // allows for insertion of new document\n    returnOriginal: false\n  });\n  return result.value; // return the song object\n}\n\nasync function performAction(req) {\n  if (req.method == \"GET\") {\n    return getSongs();\n  } else if (req.method == \"POST\") {\n    return createSong(req);\n  }\n\n  console.log(\"req:\" + req.method); // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n\n  throw {\n    status: 405\n  };\n}\n\nexport default performAction;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/index.js"],"names":["getSongs","MongoClient","require","uri","client","useNewUrlParser","users","db","collection","find","toArray","createSong","req","song","body","status","message","query","mutation","$setOnInsert","result","findOneAndUpdate","upsert","returnOriginal","value","performAction","method","console","log"],"mappings":"AAAA;AACA,OAAO,eAAeA,QAAf,GAA0B;AAC/B,QAAMC,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,WAAvC;;AACA,QAAME,GAAG,GACP,yGADF;AAEA,QAAMC,MAAM,GAAG,IAAIH,WAAJ,CAAgBE,GAAhB,EAAqB;AAAEE,IAAAA,eAAe,EAAE;AAAnB,GAArB,CAAf;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoBC,UAApB,CAA+B,WAA/B,CAAd;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,EAAX,EAAeC,OAAf,EAAP,CAN+B,CAME;AAClC,C,CAED;AACA;;AACA,eAAeC,UAAf,CAA0BC,GAA1B,EAA+B;AAC7B,QAAMC,IAAI,GAAGD,GAAG,CAACE,IAAjB,CAD6B,CAE7B;AACA;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,UAAM;AACJE,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GAT4B,CAW7B;;;AACA,QAAMf,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,WAAvC;;AACA,QAAME,GAAG,GACP,yGADF;AAEA,QAAMC,MAAM,GAAG,IAAIH,WAAJ,CAAgBE,GAAhB,EAAqB;AAAEE,IAAAA,eAAe,EAAE;AAAnB,GAArB,CAAf;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoBC,UAApB,CAA+B,WAA/B,CAAd,CAhB6B,CAkB7B;;AACA,QAAMS,KAAK,GAAG;AACZJ,IAAAA;AADY,GAAd;AAIA,QAAMK,QAAQ,GAAG;AACf;AACA;AACAC,IAAAA,YAAY,EAAE;AACZN,MAAAA;AADY;AAHC,GAAjB,CAvB6B,CA+B7B;AACA;AACA;;AACA,QAAMO,MAAM,GAAG,MAAMd,KAAK,CAACe,gBAAN,CAAuBJ,KAAvB,EAA8BC,QAA9B,EAAwC;AAC3DI,IAAAA,MAAM,EAAE,IADmD;AAC7C;AACdC,IAAAA,cAAc,EAAE;AAF2C,GAAxC,CAArB;AAKA,SAAOH,MAAM,CAACI,KAAd,CAvC6B,CAuCR;AACtB;;AAED,eAAeC,aAAf,CAA6Bb,GAA7B,EAAkC;AAChC,MAAIA,GAAG,CAACc,MAAJ,IAAc,KAAlB,EAAyB;AACvB,WAAO1B,QAAQ,EAAf;AACD,GAFD,MAEO,IAAIY,GAAG,CAACc,MAAJ,IAAc,MAAlB,EAA0B;AAC/B,WAAOf,UAAU,CAACC,GAAD,CAAjB;AACD;;AACDe,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAShB,GAAG,CAACc,MAAzB,EANgC,CAQhC;AACA;AACA;AACA;AACA;;AACA,QAAM;AAAEX,IAAAA,MAAM,EAAE;AAAV,GAAN;AACD;;AAED,eAAeU,aAAf","sourcesContent":["// async api endpoint to retrieve all songs\nexport async function getSongs() {\n  const MongoClient = require(\"mongodb\").MongoClient;\n  const uri =\n    \"mongodb+srv://gautam_mundewadi:MusicQ@cluster0-yxuih.azure.mongodb.net/test?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri, { useNewUrlParser: true });\n  const users = client.db(\"Titles\").collection(\"song_name\");\n  return users.find({}).toArray(); // { } document returns ALL documents in database\n}\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nasync function createSong(req) {\n  const song = req.body;\n  // if the song passed is null\n  // deal with this edge case\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n\n  // create MongoDB client as well as reference to MongoDB collection\n  const MongoClient = require(\"mongodb\").MongoClient;\n  const uri =\n    \"mongodb+srv://gautam_mundewadi:MusicQ@cluster0-yxuih.azure.mongodb.net/test?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri, { useNewUrlParser: true });\n  const users = client.db(\"Titles\").collection(\"song_name\");\n\n  // set query to be of song\n  const query = {\n    song\n  };\n\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  };\n\n  // first search for document in MongoDB database that matches query.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n  const result = await users.findOneAndUpdate(query, mutation, {\n    upsert: true, // allows for insertion of new document\n    returnOriginal: false\n  });\n\n  return result.value; // return the song object\n}\n\nasync function performAction(req) {\n  if (req.method == \"GET\") {\n    return getSongs();\n  } else if (req.method == \"POST\") {\n    return createSong(req);\n  }\n  console.log(\"req:\" + req.method);\n\n  // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n  throw { status: 405 };\n}\n\nexport default performAction;\n"]},"metadata":{},"sourceType":"module"}