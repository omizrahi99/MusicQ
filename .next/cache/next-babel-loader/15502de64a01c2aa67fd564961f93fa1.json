{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input_Fun.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useState, useCallback } from \"react\";\nimport useSWR from \"swr\";\nimport fetch from \"isomorphic-unfetch\";\nimport { fetchData } from \"../utils/fetchData\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input_Fun() {\n  // handles changes to name of song dynamically\n  var submit = useCallback(function _callee(event) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // the body of this song is built from state\n              body: JSON.stringify({\n                name: name,\n                score: score\n              })\n            }));\n\n          case 2:\n            // update sent\n            setSent(true);\n            updateSongs();\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  var updateSongs = useSWR(\"/api/all\", fetchData, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  }); // set initial hooks to keep track of state\n\n  var _useState = useState(0),\n      score = _useState[0],\n      setScore = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(false),\n      sentDatabase = _useState3[0],\n      setSent = _useState3[1];\n\n  var _useState4 = useState({}),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    form: \"sname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Song Name \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"sname\",\n    name: \"sname\",\n    value: name,\n    onChange: function onChange() {\n      return setName(event.target.value);\n    },\n    placeholder: \"enter song name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, score), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setScore(score + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Upvote\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setScore(score - 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Downvote\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return submit();\n    },\n    className: \"button\",\n    style: {\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \" Save to Database \")), __jsx(\"h1\", {\n    style: {\n      display: sentDatabase ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \" \", name, \" saved to MongoDB Database\", \" \"), __jsx(Retrieve, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Input_Fun;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/components/Input_Fun.js"],"names":["React","useState","useCallback","useSWR","fetch","fetchData","Retrieve","Input_Fun","submit","event","method","headers","body","JSON","stringify","name","score","setSent","updateSongs","revalidateOnFocus","revalidateOnReconnect","setScore","setName","sentDatabase","data","setData","target","value","verticalAlign","display"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useCallback } from \"react\";\nimport useSWR from \"swr\";\nimport fetch from \"isomorphic-unfetch\";\nimport { fetchData } from \"../utils/fetchData\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input_Fun() {\n  // handles changes to name of song dynamically\n  const submit = useCallback(async event => {\n    await fetch(\"/api/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // the body of this song is built from state\n      body: JSON.stringify({\n        name: name,\n        score: score\n      })\n    });\n    // update sent\n    setSent(true);\n    updateSongs();\n  }, []);\n\n  const updateSongs = useSWR(\"/api/all\", fetchData, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  // set initial hooks to keep track of state\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [sentDatabase, setSent] = useState(false);\n  const [data, setData] = useState({});\n\n  return (\n    <div>\n      {/* Gather name of song */}\n      <form>\n        <label form=\"sname\">Song Name </label>\n        <input\n          type=\"text\"\n          id=\"sname\"\n          name=\"sname\"\n          value={name}\n          onChange={() => setName(event.target.value)}\n          placeholder=\"enter song name\"\n        ></input>\n      </form>\n\n      {/* Gather score of song */}\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>Upvote</button>\n      <button onClick={() => setScore(score - 1)}>Downvote</button>\n      <br />\n      <br />\n\n      {/* sumbit name and score of song to MongoDB Database*/}\n      <button\n        onClick={() => submit()}\n        className=\"button\"\n        style={{ verticalAlign: \"middle\" }}\n      >\n        {\" \"}\n        <span> Save to Database </span>\n      </button>\n\n      {/* Conditional rendering to display data sent to MongoDB Database*/}\n      <h1 style={{ display: sentDatabase ? \"block\" : \"none\" }}>\n        {\" \"}\n        {name} saved to MongoDB Database{\" \"}\n      </h1>\n      <Retrieve data={data} />\n    </div>\n  );\n}\n\nexport default Input_Fun;\n"]},"metadata":{},"sourceType":"module"}