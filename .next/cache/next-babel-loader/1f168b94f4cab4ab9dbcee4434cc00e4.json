{"ast":null,"code":"import { initDatabase } from \"../../utils/mongodb\"; // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nasync function incrementSong(req, res) {\n  const song = req.body;\n  console.log(\"incrementing \" + song.name); // if the song passed is null\n  // deal with this edge case\n\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\"); // find document with song name and decrement the score\n\n  const result = await users.findOneAndUpdate({\n    name: song.name\n  }, {\n    $inc: {\n      score: -1\n    }\n  });\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({\n    result\n  }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"PUT\") {\n    return incrementSong(req, res);\n  } // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n\n\n  throw {\n    status: 405\n  };\n}\n\nexport default performAction;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/increment.js"],"names":["initDatabase","incrementSong","req","res","song","body","console","log","name","status","message","client","users","collection","result","findOneAndUpdate","$inc","score","statusCode","setHeader","end","JSON","stringify","performAction","method"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B,C,CAEA;AACA;;AACA,eAAeC,aAAf,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC,QAAMC,IAAI,GAAGF,GAAG,CAACG,IAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBH,IAAI,CAACI,IAAnC,EAFqC,CAGrC;AACA;;AACA,MAAI,CAACJ,IAAL,EAAW;AACT,UAAM;AACJK,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GAVoC,CAWrC;;;AACA,QAAMC,MAAM,GAAG,MAAMX,YAAY,EAAjC;AACA,QAAMY,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd,CAbqC,CAerC;;AACA,QAAMC,MAAM,GAAG,MAAMF,KAAK,CAACG,gBAAN,CACnB;AAAEP,IAAAA,IAAI,EAAEJ,IAAI,CAACI;AAAb,GADmB,EAEnB;AAAEQ,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAC;AAAV;AAAR,GAFmB,CAArB;AAKAd,EAAAA,GAAG,CAACe,UAAJ,GAAiB,GAAjB;AACAf,EAAAA,GAAG,CAACgB,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAhB,EAAAA,GAAG,CAACiB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA;AAAF,GAAf,CAAR;AACD;;AAED,eAAeS,aAAf,CAA6BrB,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC,MAAID,GAAG,CAACsB,MAAJ,IAAc,KAAlB,EAAyB;AACvB,WAAOvB,aAAa,CAACC,GAAD,EAAMC,GAAN,CAApB;AACD,GAHoC,CAIrC;AACA;AACA;AACA;AACA;;;AACA,QAAM;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAAN;AACD;;AAED,eAAec,aAAf","sourcesContent":["import { initDatabase } from \"../../utils/mongodb\";\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nasync function incrementSong(req, res) {\n  const song = req.body;\n  console.log(\"incrementing \" + song.name);\n  // if the song passed is null\n  // deal with this edge case\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n  // create MongoDB client as well as reference to MongoDB collection\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n\n  // find document with song name and decrement the score\n  const result = await users.findOneAndUpdate(\n    { name: song.name },\n    { $inc: { score: -1 } }\n  );\n\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({ result }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"PUT\") {\n    return incrementSong(req, res);\n  }\n  // request is not a GET or POST;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n  throw { status: 405 };\n}\n\nexport default performAction;\n"]},"metadata":{},"sourceType":"module"}