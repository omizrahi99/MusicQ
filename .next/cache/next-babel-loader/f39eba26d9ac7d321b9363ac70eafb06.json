{"ast":null,"code":"import { initDatabase } from \"../../utils/mongodb\"; // async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\n\nasync function updateSong(req, res) {\n  const query = req.body.song;\n  console.log(\"updating song ... \" + query); // if the song passed is null\n  // deal with this edge case\n\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  } // create MongoDB client as well as reference to MongoDB collection\n\n\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  }; // first search for document in MongoDB database that matches query.\n  // Query is the name of the song.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n\n  const result = await users.updateOne({\n    song: {\n      song: query\n    }\n  }, {\n    $set: {\n      score: req.body.score\n    }\n  });\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({\n    result\n  }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"PUT\") {\n    return updateSong(req, res);\n  } // request is not a GET or PUT;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n\n\n  throw {\n    status: 405\n  };\n}\n\nexport default performAction;","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/pages/api/update.js"],"names":["initDatabase","updateSong","req","res","query","body","song","console","log","status","message","client","users","collection","mutation","$setOnInsert","result","updateOne","$set","score","statusCode","setHeader","end","JSON","stringify","performAction","method"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B,C,CAEA;AACA;;AACA,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AAClC,QAAMC,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAASC,IAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBJ,KAAnC,EAFkC,CAIlC;AACA;;AACA,MAAI,CAACE,IAAL,EAAW;AACT,UAAM;AACJG,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAAN;AAID,GAXiC,CAalC;;;AACA,QAAMC,MAAM,GAAG,MAAMX,YAAY,EAAjC;AACA,QAAMY,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkB,WAAlB,CAAd;AAEA,QAAMC,QAAQ,GAAG;AACf;AACA;AACAC,IAAAA,YAAY,EAAE;AACZT,MAAAA;AADY;AAHC,GAAjB,CAjBkC,CAyBlC;AACA;AACA;AACA;;AACA,QAAMU,MAAM,GAAG,MAAMJ,KAAK,CAACK,SAAN,CACnB;AAAEX,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAEF;AAAR;AAAR,GADmB,EAEnB;AACEc,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAEjB,GAAG,CAACG,IAAJ,CAASc;AAAlB;AADR,GAFmB,CAArB;AAOAhB,EAAAA,GAAG,CAACiB,UAAJ,GAAiB,GAAjB;AACAjB,EAAAA,GAAG,CAACkB,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAlB,EAAAA,GAAG,CAACmB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAER,IAAAA;AAAF,GAAf,CAAR;AACD;;AAED,eAAeS,aAAf,CAA6BvB,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC,MAAID,GAAG,CAACwB,MAAJ,IAAc,KAAlB,EAAyB;AACvB,WAAOzB,UAAU,CAACC,GAAD,EAAMC,GAAN,CAAjB;AACD,GAHoC,CAIrC;AACA;AACA;AACA;AACA;;;AACA,QAAM;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAAN;AACD;;AAED,eAAegB,aAAf","sourcesContent":["import { initDatabase } from \"../../utils/mongodb\";\n\n// async api endpoint to create a new song\n// handles the case where a dupicate song is attempted to be added\nasync function updateSong(req, res) {\n  const query = req.body.song;\n  console.log(\"updating song ... \" + query);\n\n  // if the song passed is null\n  // deal with this edge case\n  if (!song) {\n    throw {\n      status: 400,\n      message: \"song was not found\"\n    };\n  }\n\n  // create MongoDB client as well as reference to MongoDB collection\n  const client = await initDatabase();\n  const users = client.collection(\"song_name\");\n\n  const mutation = {\n    // if a document with this song already exisits, simply over-write it for now;\n    // this is functionality only for the spike\n    $setOnInsert: {\n      song\n    }\n  };\n\n  // first search for document in MongoDB database that matches query.\n  // Query is the name of the song.\n  // If none is found, document with mutation is added as it is simply\n  // either adding a tag to an exisiting document or creating a new one.\n  const result = await users.updateOne(\n    { song: { song: query } },\n    {\n      $set: { score: req.body.score }\n    }\n  );\n\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.end(JSON.stringify({ result }));\n}\n\nasync function performAction(req, res) {\n  if (req.method == \"PUT\") {\n    return updateSong(req, res);\n  }\n  // request is not a GET or PUT;\n  // in the context of this spike throw an exception but\n  // in the full application you should also write out a delete\n  // note: status 405 stands for indicating that the specified request HTTP method was received and recognized by the server,\n  // but the server has rejected that particular method for the requested resource.\n  throw { status: 405 };\n}\n\nexport default performAction;\n"]},"metadata":{},"sourceType":"module"}