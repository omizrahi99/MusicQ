{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { MongoClient } from \"mongodb\";\nimport config from \"./config\";\nvar client = new MongoClient(config.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nvar connected = false;\nexport function initDatabase() {\n  return _regeneratorRuntime.async(function initDatabase$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (connected) {\n            _context.next = 4;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(client.connect());\n\n        case 3:\n          connected = true;\n\n        case 4:\n          return _context.abrupt(\"return\", client.db(\"Titles\"));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n} // converts JSON object into BSON\n\nexport function serializeDocument(doc) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // TODO remove side effects\n  var _options$idFields = options.idFields,\n      idFields = _options$idFields === void 0 ? [\"_id\"] : _options$idFields;\n  console.log(idFields);\n\n  var _iterator = _createForOfIteratorHelper(idFields),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var idField = _step.value;\n\n      if (doc[idField]) {\n        doc[idField] = doc[idField].toString();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return doc;\n}","map":{"version":3,"sources":["/Users/gautam/Desktop/cs/48/project-s1-t1-music-queue/utils/mongodb.js"],"names":["MongoClient","config","client","MONGODB_URI","useNewUrlParser","useUnifiedTopology","connected","initDatabase","connect","db","serializeDocument","doc","options","idFields","console","log","idField","toString"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBC,MAAM,CAACE,WAAvB,EAAoC;AACjDC,EAAAA,eAAe,EAAE,IADgC;AAEjDC,EAAAA,kBAAkB,EAAE;AAF6B,CAApC,CAAf;AAIA,IAAIC,SAAS,GAAG,KAAhB;AAEA,OAAO,SAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACAD,SADA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEGJ,MAAM,CAACM,OAAP,EAFH;;AAAA;AAGHF,UAAAA,SAAS,GAAG,IAAZ;;AAHG;AAAA,2CAKEJ,MAAM,CAACO,EAAP,CAAU,QAAV,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQP;;AACA,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAA8C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACnD;AADmD,0BAEpBA,OAFoB,CAE3CC,QAF2C;AAAA,MAE3CA,QAF2C,kCAEhC,CAAC,KAAD,CAFgC;AAGnDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAHmD,6CAK7BA,QAL6B;AAAA;;AAAA;AAKnD,wDAAgC;AAAA,UAArBG,OAAqB;;AAC9B,UAAIL,GAAG,CAACK,OAAD,CAAP,EAAkB;AAChBL,QAAAA,GAAG,CAACK,OAAD,CAAH,GAAeL,GAAG,CAACK,OAAD,CAAH,CAAaC,QAAb,EAAf;AACD;AACF;AATkD;AAAA;AAAA;AAAA;AAAA;;AAWnD,SAAON,GAAP;AACD","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport config from \"./config\";\n\nconst client = new MongoClient(config.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nlet connected = false;\n\nexport async function initDatabase() {\n  if (!connected) {\n    await client.connect();\n    connected = true;\n  }\n  return client.db(\"Titles\");\n}\n\n// converts JSON object into BSON\nexport function serializeDocument(doc, options = {}) {\n  // TODO remove side effects\n  const { idFields = [\"_id\"] } = options;\n  console.log(idFields);\n\n  for (const idField of idFields) {\n    if (doc[idField]) {\n      doc[idField] = doc[idField].toString();\n    }\n  }\n\n  return doc;\n}\n"]},"metadata":{},"sourceType":"module"}