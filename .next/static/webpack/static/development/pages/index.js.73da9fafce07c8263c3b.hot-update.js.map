{"version":3,"file":"static/webpack/static/development/pages/index.js.73da9fafce07c8263c3b.hot-update.js","sources":["webpack:///./components/Input.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { fetch } from \"../utils/fetch\";\nimport \"./style.css\";\nimport Retrieve from \"./Retrieve\";\n\nfunction Input() {\n  // set initial hooks to keep track of state\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [sentDatabase, setSent] = useState(false);\n\n  // useSWR is like your own state that is backed by an API call\n  // mutate w/out parameters just causes refetch of endpoint\n  // you can change the arguments with a parameter see repo\n  // for further documentation.\n  const { data, mutate } = useSWR(\"/api/all\", fetch, {\n    // see example repo for explination about booleans\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    initialData: {\n      result: [\n        {\n          _id: \"FETCHING DATA ... \",\n          name: \"FETCHING DATA ... \",\n          score: \"FETCHING DATA ... \"\n        }\n      ]\n    }\n  });\n\n  // re-fectch data from database for initial render. mutate() does this\n  // because it is the function that references the data hook above\n  // React will call useEffect when any of the dependecies change.\n  // Because it an empty array; you call it the first time and never again\n  useEffect(() => {\n    mutate();\n  }, []);\n\n  // handles changes to name of song dynamically\n  const submit = useCallback(\n    async event => {\n      await fetch(\"/api/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // the body of this song is built from state\n        body: JSON.stringify({\n          name: name,\n          score: score\n        })\n      });\n\n      // forces a call to the hook useSWR\n      await mutate();\n\n      // update sent\n      setSent(true);\n    },\n    [name, score]\n  );\n\n  return (\n    <div>\n      {/* Display current queue of music */}\n      <Retrieve data={data} mutate={async () => await mutate()} />\n      <hr className=\"linebreak\" />\n      {/* Gather name of song */}\n      <form>\n        <input\n          type=\"text\"\n          id=\"sname\"\n          name=\"sname\"\n          value={name}\n          onChange={() => setName(event.target.value)}\n          placeholder=\"enter song name ... \"\n        ></input>\n        {/* sumbit name and score of song to MongoDB Database*/}\n        <button\n          onClick={() => submit()}\n          className=\"button\"\n          style={{ verticalAlign: \"middle\" }}\n        >\n          {\" \"}\n          <span> QSong&#43;</span>\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Input;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAXA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAJA;AAVA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AANA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAgBA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}