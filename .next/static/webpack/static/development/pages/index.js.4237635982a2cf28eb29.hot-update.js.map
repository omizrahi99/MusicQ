{"version":3,"file":"static/webpack/static/development/pages/index.js.4237635982a2cf28eb29.hot-update.js","sources":["webpack:///./components/Input.js"],"sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nclass Input extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      name: \"\",\n      sent_to_database: false\n    };\n    this.incrementScore = this.incrementScore.bind(this);\n    this.decrementScore = this.decrementScore.bind(this);\n    this.nameChange = this.nameChange.bind(this);\n    this.submit = this.submit.bind(this);\n  }\n\n  // increments the score of the particular song\n  incrementScore() {\n    this.setState(prevState => {\n      return {\n        score: prevState.score + 1,\n        name: prevState.name,\n        sent_to_database: false\n      };\n    });\n  }\n\n  // decrements the score of the particular song\n  decrementScore() {\n    this.setState(prevState => {\n      // if the score is 0; don't go negative!\n      if (prevState.score == 0) {\n        return {\n          score: 0,\n          name: prevState.name,\n          sent_to_database: false\n        };\n      }\n      // score is not 0; subtract 1\n      else {\n        return {\n          score: prevState.score - 1,\n          name: prevState.name,\n          sent_to_database: false\n        };\n      }\n    });\n  }\n\n  // handles changes to name of song dynamically\n  nameChange() {\n    this.setState(prevState => {\n      return {\n        score: prevState.score,\n        name: event.target.value,\n        sent_to_database: false\n      };\n    });\n  }\n\n  // submit information to the MongoDB Database\n  submit() {\n    /* Errors with connecting to MongoDB Database\n\n    // save songName and score to send to mongoDB database\n    const songName = this.state.name;\n    const score = this.state.score;\n\n    const MongoClient = require(\"mongodb\").MongoClient; // MongoDB module that is required to connect to a MongoDB database\n    // Note that the password for the MongoClient is \"MusicQ\"\n    const uri =\n      \"mongodb+srv://gautam_mundewadi:<MusicQ>@cluster0-yxuih.azure.mongodb.net/test?retryWrites=true&w=majority\";\n    const client = new MongoClient(uri, { useNewUrlParser: true });\n    // create a new listing in the database\n    this.createListing(client, { hello: \"test\" });\n\n    */\n\n    // update state to conditional render message to user\n    this.setState(prevState => {\n      return {\n        score: prevState.score,\n        name: prevState.name,\n        sent_to_database: true\n      };\n    });\n  }\n\n  // create a lisiting of a song to the MongoDB Database.\n  async createListing(client, newListing) {\n    const result = await client\n      .db(\"test\")\n      .collection(\"devices\")\n      .insertOne(newListing);\n    console.log(\n      `New listing created with the following id: ${result.insertedId}`\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Input to MongoDB Database</h1>\n\n        {/* Gather name of song */}\n        <form className>\n          <label form=\"sname\">Song Name </label>\n          <input\n            type=\"text\"\n            id=\"sname\"\n            name=\"sname\"\n            value={this.state.name}\n            onChange={this.nameChange}\n            placeholder=\"enter song name\"\n          ></input>\n        </form>\n\n        {/* Gather score of song */}\n        <h1>{this.state.score}</h1>\n        <button onClick={this.incrementScore}>Upvote</button>\n        <button onClick={this.decrementScore}>Downvote</button>\n\n        {/* sumbit name and score of song to MongoDB Database*/}\n        <button\n          onClick={this.submit}\n          className=\"button\"\n          style={{ verticalAlign: \"middle\" }}\n        >\n          {\" \"}\n          <span> Save to Database </span>\n        </button>\n\n        {/* Conditional rendering to display data sent to MongoDB Database*/}\n        <h1 style={{ display: this.state.sent_to_database ? \"block\" : \"none\" }}>\n          {\" \"}\n          {this.state.name} saved to MongoDB Database{\" \"}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAVA;AAWA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAEA;AACA;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAEA;;;;;;;AACA;AACA;;AADA;AAIA;AACA;;;;;;;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAzIA;AACA;AA2IA;;;;A","sourceRoot":""}